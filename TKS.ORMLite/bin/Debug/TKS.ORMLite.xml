<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TKS.ORMLite</name>
    </assembly>
    <members>
        <member name="T:TKS.ORMLite.Driver.OracleDriver">
            <summary>
            Oracle驱动
            </summary>
        </member>
        <member name="T:TKS.ORMLite.Driver.IDriverType">
            <summary>
            数据库类型提供描述接口
            </summary>
        </member>
        <member name="M:TKS.ORMLite.Driver.IDriverType.FormatNameForParameter(System.String)">
            <summary>
            格式化参数名
            </summary>
            <param name="parametername"></param>
            <returns></returns>
        </member>
        <member name="P:TKS.ORMLite.Driver.IDriverType.Connection">
            <summary>
            获取数据连接对象
            </summary>
        </member>
        <member name="P:TKS.ORMLite.Driver.IDriverType.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:TKS.ORMLite.Driver.IDriverType.NamedPrefix">
            <summary>
            参数开头标识符
            </summary>
        </member>
        <member name="P:TKS.ORMLite.Driver.OracleDriver.NamedPrefix">
            <summary>
            参数开头标识符
            </summary>
        </member>
        <member name="P:TKS.ORMLite.Driver.OracleDriver.DBDSN">
            <summary>
            数据库标识
            </summary>
        </member>
        <member name="T:TKS.ORMLite.EntityHelper">
            <summary>
                于数据实体的一些反射操作的辅助工具类，主要实现了从数据库加载，和从Request中加载实体的功能。
            </summary>
        </member>
        <member name="F:TKS.ORMLite.EntityHelper.s_hashtbl">
            <summary>
                存储一些实体描述信息
            </summary>
        </member>
        <member name="M:TKS.ORMLite.EntityHelper.Internal_LoadItemValuesFormDbRow(TKS.ORMLite.CommonDataAdapter,System.Object,System.Boolean,System.Boolean,System.String)">
            <summary>
                对实体类成员进行赋值
            </summary>
            <param name="row">一行数据</param>
            <param name="item">实体类</param>
            <param name="loadAllField">是否加载所有成员</param>
            <param name="checkSucessCount"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.EntityHelper.GetItemDescription(System.Type)">
            <summary>
                获取一个类型的具体描述。
            </summary>
            <param name="itemType">要加载的类型</param>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.EntityHelper.InternalGetItemDescription(System.Type)">
            <summary>
                获取一个类型的具体描述。
            </summary>
            <param name="itemType"></param>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.EntityHelper.IsEnumerableType(System.Type)">
            <summary>
                测试一个类型是不是可枚举类型，但不包括 string、byte 类型 
            </summary>
            <param name="testType"></param>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.EntityHelper.CheckItemIsNormalClass(System.Type)">
            <summary>
                检查一个类型是否是一个“普通”的实体类（建议使用自定义基类的做法） 【警告】这个方法不检查参数是否为 null 。
                如果不是实体类，不抛出异常
            </summary>
            <param name="itemType">要检查的类型</param>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.EntityHelper.EnsureIsDataItemType(System.Type)">
            <summary>
                确认类型是一个数据实体类型，否则会抛出异常。 
            </summary>
            <param name="itemType">要检查的类型</param>
        </member>
        <member name="M:TKS.ORMLite.EntityHelper.TrySetDataItemMemberValue(TKS.ORMLite.CommonDataAdapter,System.Object,TKS.ORMLite.EntityMemberDescription,System.String)">
            <summary>
                设置成员的值
            </summary>
            <param name="row"></param>
            <param name="item"></param>
            <param name="info"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.EntityHelper.SafeSetMemberValue(System.Object,TKS.ORMLite.EntityMemberDescription,System.Object)">
            <summary>
                将值赋给成员
            </summary>
            <param name="item"></param>
            <param name="info"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.EntityHelper.GetRealType(System.Type)">
            <summary>
                返回一个类型的真实的类型，用于获取【可空类型】的参数类型。 
            </summary>
            <param name="testType"></param>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.EntityHelper.LoadItemsFromDataRows``1(System.Data.DataRow[])">
            <summary>
                从一个DataRow数组中加载实体列表。
            </summary>
            <typeparam name="T">实体的类型</typeparam>
            <param name="rows">要加载的数据行数组</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:TKS.ORMLite.EntityHelper.LoadItemsFromDataTable``1(System.Data.DataTable)">
            <summary>
                从一个数据表中加载实体列表。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.EntityHelper.LoadItemsFromXmlFile``1(System.String)">
            <summary>
                从一个XML文件中加载实体列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlPath"></param>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.EntityHelper.LoadItemValuesFormDbRow(TKS.ORMLite.CommonDataAdapter,System.Object,System.Boolean,System.Boolean)">
            <summary>
                尝试从一个MyDataAdapter中加载实休对象的成员（一次加载一行信息） 
            </summary>
            <param name="row">CommonDataAdapter对象</param>
            <param name="item">实休对象的实例</param>
            <param name="loadAllField">是否要加载全部成员，可由ItemFieldAttribute.OnlyLoadAll控制</param>
            <param name="checkSucessCount">加载完成后，是否要检查成功的数量，确保每次的加载都是成功的</param>
            <returns>返回成功加载的成员数量</returns>
        </member>
        <member name="T:TKS.ORMLite.EntityHelper.LatestLoadDataItemInfo">
            <summary>
                最终要加载的数据项信息
            </summary>
        </member>
        <member name="T:TKS.ORMLite.LogForDB">
            <summary>
                错误日志处理
            </summary>
        </member>
        <member name="M:TKS.ORMLite.LogForDB.WriteLog(System.String)">
            <summary>
            写入sql查询日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:TKS.ORMLite.LogForDB.Filename">
            <summary>
                获取或设置日志文件名，默认sqlLog
            </summary>
        </member>
        <member name="T:TKS.ORMLite.CommonDataAdapter">
            <summary>
                数据索引器工厂
            </summary>
        </member>
        <member name="M:TKS.ORMLite.CommonDataAdapter.#ctor(System.Data.DataRow)">
            <summary>
                构造函数
            </summary>
            <param name="row">DataRow对象</param>
        </member>
        <member name="M:TKS.ORMLite.CommonDataAdapter.#ctor(System.Data.IDataReader)">
            <summary>
                构造函数
            </summary>
            <param name="reader">IDataReader对象</param>
        </member>
        <member name="M:TKS.ORMLite.CommonDataAdapter.GetColumnNames(System.Boolean)">
            <summary>
                获取列名数组
            </summary>
            <param name="toUpper">是否转成大写</param>
            <returns></returns>
        </member>
        <member name="P:TKS.ORMLite.CommonDataAdapter.UserData">
            <summary>
                最终要加载的数据，包含列名与实体描述信息
            </summary>
        </member>
        <member name="P:TKS.ORMLite.CommonDataAdapter.Item(System.String)">
            <summary>
                根据字段名，获取值
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.CommonDataAdapter.IDataRow.GetColumnNames">
            <summary>
                获取列名
            </summary>
            <returns>列名数组</returns>
        </member>
        <member name="M:TKS.ORMLite.CommonDataAdapter.IDataRow.GetValue(System.String)">
            <summary>
                根据字段名取值
            </summary>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.CommonDataAdapter.IDataRow.SetNewRow(System.Object)">
            <summary>
                对于DataTable执行foreach操作时，没有必要为每个DataRow创建一个CommonDataAdapter对象，可以调用这个方法设置“当前行”
                如果是对于同一个DbDataReader，执行这个调用就没有意义了。
                注意：新行的【字段列表】一定要和“前一行”是一样的。（此处代码不检查，但可能会引发异常）     
            </summary>
            <param name="row">参数的类型只能是：DataRow 或 DbDataReader，否则会抛出异常</param>
        </member>
        <member name="T:TKS.ORMLite.EntityDescription">
            <summary>
                实体类描述
            </summary>
        </member>
        <member name="M:TKS.ORMLite.EntityDescription.#ctor(System.Type,System.Int32)">
            <summary>
                构造函数
            </summary>
            <param name="type">实体类类型</param>
            <param name="memberCapacity">成员数量</param>
        </member>
        <member name="M:TKS.ORMLite.EntityDescription.TryGetValue(System.String,TKS.ORMLite.EntityMemberDescription@)">
            <summary>
                根据一个成员的名称，获取相应的EntityMemberDescription的实例描述信息。 
            </summary>
            <param name="name">成员的属性名或映射的数据库的字段名</param>
            <param name="info">EntityMemberDescription对象</param>
            <returns>是否成功获取到指定的成员信息</returns>
        </member>
        <member name="M:TKS.ORMLite.EntityDescription.SetSuccessCount(System.Int32,System.Int32)">
            <summary>
                设置实体类的期望加载成员的成功数量
            </summary>
            <param name="loadAllcount">加载全部时的数量</param>
            <param name="loadPartCount">加载部分时的数量</param>
        </member>
        <member name="P:TKS.ORMLite.EntityDescription.Dict">
            <summary>
                实体类的成员描述,key：成员名，value：成员描述
            </summary>
        </member>
        <member name="P:TKS.ORMLite.EntityDescription.ItemType">
            <summary>
                实体类的类型
            </summary>
        </member>
        <member name="P:TKS.ORMLite.EntityDescription.LoadALLValues_ExpectSuccessCount">
            <summary>
                当实体类成员有设置OnlyLoadAll为true时候，全部加载和部分加载才会有区分，
                否则全部加载和部分加载没有区分，返回【全部加载时】期望的成功加载数据成员数量
            </summary>
        </member>
        <member name="P:TKS.ORMLite.EntityDescription.LoadPartialValues_ExpectSuccessCount">
            <summary>
                当实体类成员有设置OnlyLoadAll为true时候，全部加载和部分加载才会有区分，
                否则全部加载和部分加载没有区分，返回【部分加载时】期望的成功加载数据成员数量 
            </summary>
        </member>
        <member name="T:TKS.ORMLite.EntityMemberDescription">
            <summary>
                实体类成员描述，并提供获取、设置成员值的方法
            </summary>
        </member>
        <member name="M:TKS.ORMLite.EntityMemberDescription.#ctor">
            <summary>
                构造函数
            </summary>
        </member>
        <member name="M:TKS.ORMLite.EntityMemberDescription.GetValue(System.Object)">
            <summary>
                获取该成员的值
            </summary>
            <param name="item">将要返回成员值的对象</param>
            <returns>成员的值</returns>
        </member>
        <member name="M:TKS.ORMLite.EntityMemberDescription.GetDefaultValue">
            <summary>
            获取默认值
            </summary>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.EntityMemberDescription.SetValue(System.Object,System.Object)">
            <summary>
                设置成员的值
            </summary>
            <param name="item">将要设置成员值的对象</param>
            <param name="val">赋予成员的值</param>
        </member>
        <member name="P:TKS.ORMLite.EntityMemberDescription.IsProperty">
            <summary>
                此成员是否为“属性”，否则为“字段”
            </summary>
        </member>
        <member name="P:TKS.ORMLite.EntityMemberDescription.IsPK">
            <summary>
             是否为主键
            </summary>
        </member>
        <member name="P:TKS.ORMLite.EntityMemberDescription.MemberAttr">
            <summary>
                ItemFieldAttribute形式的描述信息 
            </summary>
        </member>
        <member name="P:TKS.ORMLite.EntityMemberDescription.MemberInfo">
            <summary>
                反射信息
            </summary>
        </member>
        <member name="P:TKS.ORMLite.EntityMemberDescription.MemberType">
            <summary>
                此成员（字段或属性）的类型 
            </summary>
        </member>
        <member name="T:TKS.ORMLite.ExecuteTime">
            <summary>
                事件发生的时刻
            </summary>
        </member>
        <member name="F:TKS.ORMLite.ExecuteTime.BeforeExecute">
            <summary>
                在执行命令前发生
            </summary>
        </member>
        <member name="F:TKS.ORMLite.ExecuteTime.AfterExecute">
            <summary>
                在执行命令后发生
            </summary>
        </member>
        <member name="T:TKS.ORMLite.ExecuteEventArgs">
            <summary>
                命令执行参数
            </summary>
        </member>
        <member name="M:TKS.ORMLite.ExecuteEventArgs.#ctor(TKS.ORMLite.ExecuteTime)">
            <summary>
                初始化一个新的<see cref="T:TKS.ORMLite.ExecuteEventArgs"/>实例
            </summary>
            <param name="time"></param>
        </member>
        <member name="P:TKS.ORMLite.ExecuteEventArgs._ExecuteTime">
            <summary>
                获取或设置该事件的执行时刻
            </summary>
        </member>
        <member name="T:TKS.ORMLite.ExecuteLogEventArgs">
            <summary>
                执行参数，若无异常_Exception为null
            </summary>
        </member>
        <member name="M:TKS.ORMLite.ExecuteLogEventArgs.#ctor(System.String,System.String)">
            <summary>
                初始化一个<see cref="!:ExecuteExceptionEventArgs"/>的实例
            </summary>
            <param name="executeMethod">执行方法名</param>
            <param name="executeText">执行文本</param>
        </member>
        <member name="M:TKS.ORMLite.ExecuteLogEventArgs.#ctor(System.String,System.String,System.Exception)">
            <summary>
                初始化一个<see cref="!:ExecuteExceptionEventArgs"/>的实例
            </summary>
            <param name="executeMethod">执行方法名</param>
            <param name="executeText">执行文本</param>
            <param name="exception">异常信息</param>
        </member>
        <member name="P:TKS.ORMLite.ExecuteLogEventArgs.ExecuteMethod">
            <summary>
                执行方法名
            </summary>
        </member>
        <member name="P:TKS.ORMLite.ExecuteLogEventArgs.ExecuteText">
            <summary>
                执行的sql语句或者存储过程名
            </summary>
        </member>
        <member name="P:TKS.ORMLite.ExecuteLogEventArgs._Exception">
            <summary>
                异常信息
            </summary>
        </member>
        <member name="T:TKS.ORMLite.DBHelper">
            <summary>
                数据库访问类
            </summary>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.#ctor">
            <summary>
                构造函数，会自动根据配置信息使用相应的数据驱动，
                IsAutoOpenClose=true,连接自动动关闭，
                如果要手动打开、关闭，设置IsAutoOpenClose=false，
                IsAutoResetCommand=true，Command执行完自动被重置，
                如需不被重置，设置IsAutoResetCommand=false
            </summary>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.#ctor(TKS.ORMLite.Driver.IDriverType)">
            <summary>
                构造函数，会自动根据配置信息使用相应的数据驱动，
                IsAutoOpenClose=true,连接自动动关闭，
                如果要手动打开、关闭，设置IsAutoOpenClose=false，
                IsAutoResetCommand=true，Command执行完自动被重置，
                如需不被重置，设置IsAutoResetCommand=false
            </summary>
            <param name="driver">数据库驱动</param>
        </member>
        <member name="F:TKS.ORMLite.DBHelper.isOccurException">
            <summary>
                执行命令时候是否发生异常
            </summary>
        </member>
        <member name="F:TKS.ORMLite.DBHelper.Execute">
            <summary>
                命令执行前后触发事件
            </summary>
        </member>
        <member name="F:TKS.ORMLite.DBHelper.ExecuteException">
            <summary>
                命令执行时，有异常触发
            </summary>
        </member>
        <member name="F:TKS.ORMLite.DBHelper.DriverType">
            <summary>
                设备对象
            </summary>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.ExecuteNonQuery">
            <summary>
                执行命令,并返回影响的行数
            </summary>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.ExecuteScalar">
            <summary>
                执行命令对象,并返回第一条记录第一列的值
            </summary>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.ExecuteDataSet(System.Int32)">
            <summary>
                执行命令,并返回查询的记录集
            </summary>
            <param name="tableCount">数据集中表的数量</param>
            <returns>包含一或多个表的数据集[Table1,Table2....]</returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.ExecuteDataSet(System.String[])">
            <summary>
                执行命令返回查询的记录集
            </summary>
            <param name="tableNames">数据集中表的名称</param>
            <returns>包含一或多个表的数据集</returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.ExecuteDataTable">
            <summary>
            执行命令，返回查询的数据表
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.Open">
            <summary>
                打开数据库连接
            </summary>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.Close">
            <summary>
                关闭数据库连接
            </summary>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.BeginTran">
            <summary>
                开始事务,数据库连接将保持连接状态
            </summary>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.Rollback">
            <summary>
                事务回滚
            </summary>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.CommitTran">
            <summary>
                提交事务
            </summary>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.FiltPara(System.String,System.String)">
            <summary>
            参数格式化
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.GetSqlStringCommond(System.String)">
            <summary>
                获取sql查询cmd
            </summary>
            <param name="strSql">sql语句</param>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.GetProcedureCommond(System.String)">
            <summary>
                获取存储过程cmd
            </summary>
            <param name="strProcName">存储过程名</param>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.AddInParameter(System.String,System.Object)">
            <summary>
                替换命令对象中的参数
            </summary>
            <param name="paraName">参数名</param>
            <param name="paraValue">参数值</param>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.AddInParameter(System.String,System.Nullable{System.Data.DbType},System.Nullable{System.Int32},System.Object)">
            <summary>
                替换command中的input类型参数
            </summary>
            <param name="paraName">参数名</param>
            <param name="paraType">参数类型</param>
            <param name="size">大小</param>
            <param name="paraValue">参数值</param>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.AddOutParameter(System.String,System.Object)">
            <summary>
                替换命令对象中的参数
            </summary>
            <param name="paraName">参数名</param>
            <param name="paraValue">参数值</param>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.AddOutParameter(System.String,System.Nullable{System.Data.DbType},System.Nullable{System.Int32},System.Object)">
            <summary>
                替换command中的output类型参数
            </summary>
            <param name="paraName">参数名</param>
            <param name="paraType">参数类型</param>
            <param name="size">大小</param>
            <param name="paraValue">参数值</param>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.AddReturnParameter(System.String,System.Object)">
            <summary>
                替换command中的ReturnValue类型参数
            </summary>
            <param name="paraName">参数名</param>
            <param name="paraValue">参数值</param>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.AddReturnParameter(System.String,System.Nullable{System.Data.DbType},System.Nullable{System.Int32},System.Object)">
            <summary>
                替换command中的ReturnValue类型参数
            </summary>
            <param name="paraName">参数名</param>
            <param name="paraType">参数类型</param>
            <param name="size">大小</param>
            <param name="paraValue">参数值</param>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.GetCmdParameter(System.String)">
            <summary>
                获取command中的指定parameter
            </summary>
            <param name="cmd">命令对象</param>
            <param name="parameterName">参数名</param>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.ExecuteSelectCmdGetJson">
            <summary>
            获取Json数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.String2Json(System.String)">
            <summary>  
            过滤特殊字符  
            </summary>  
            <param name="s"></param>  
            <returns></returns>  
        </member>
        <member name="M:TKS.ORMLite.DBHelper.ExecuteSelectCmdGetBllObject``1">
            <summary>
                执行当前命令，获取一个业务实体对象 
            </summary>
            <typeparam name="T">数据实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.ExecuteSelectCmdGetBllObject``1(System.Boolean,System.Boolean)">
            <summary>
                执行当前命令，获取一个业务实体对象 
            </summary>
            <typeparam name="T">数据实体类型</typeparam>
            <param name="loadAllField">是否加载业务实体全部字段</param>
            <param name="checkSucessCount">加载完成后，是否要检查成功的数量，确保每次的加载都是成功的</param>
            <returns>数据实体类型</returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.ExecuteSelectCmdToDicKeyInt``1(System.String)">
            <summary>
                执行当前命令并返回一个泛型的Dictionary，表中关键字为ID整型
            </summary>
            <typeparam name="T">数据实体类型</typeparam>
            <param name="fieldName">做为字典KEY的字段名，它应该包含一个int的值</param>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.ExecuteSelectCmdToDicKeyInt``1(System.String,System.Boolean,System.Boolean)">
            <summary>
                执行当前命令并返回一个泛型的Dictionary，表中关键字为ID整型
            </summary>
            <typeparam name="T">数据实体类型</typeparam>
            <param name="fieldName">做为字典KEY的字段名，它应该包含一个int的值</param>
            <param name="loadAllField">是否加载所有字段</param>
            <param name="checkSucessCount">加载完成后，是否要检查成功的数量，确保每次的加载都是成功的</param>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.ExecuteSelectCmdToDicKeyString``1(System.String)">
            <summary>
                执行当前命令并返回一个泛型的Dictionary，表中关键字为string
            </summary>
            <typeparam name="T">数据实体类型</typeparam>
            <param name="fieldName">做为字典KEY的字段名，它应该包含一个string的值</param>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.ExecuteSelectCmdToDicKeyString``1(System.String,System.Boolean,System.Boolean)">
            <summary>
                执行当前命令并返回一个泛型的Dictionary，表中关键字为string
            </summary>
            <typeparam name="T">数据实体类型</typeparam>
            <param name="fieldName">做为字典KEY的字段名，它应该包含一个string的值</param>
            <param name="loadAllField">是否加载所有字段</param>
            <param name="checkSucessCount">加载完成后，是否要检查成功的数量，确保每次的加载都是成功的</param>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.ExecuteSelectCommandToList``1">
            <summary>
                执行当前命令，并返回一个泛型的list
            </summary>
            <typeparam name="T">数据实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.ExecuteSelectCommandToList``1(System.Boolean,System.Boolean)">
            <summary>
                执行当前命令，并返回一个泛型的list
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="loadAllField">是否加载所有字段</param>
            <param name="checkSucessCount">加载完成后，是否要检查成功的数量，确保每次的加载都是成功的</param>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.Insert``1(``0)">
            <summary>
              插入一行数据 E.g
            <para>db.Insert(new Person { FirstName = "Jimi", Age = 27 })</para>
            </summary>
            <typeparam name="T">数据实体类型</typeparam>
            <param name="obj">实体</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.DeleteNonDefults``1(``0)">
            <summary>
            删除一或者多行数据，只使用（不是默认值）属性的值作为筛选条件  E.g:
            <para>db.DeleteNonDefaults(new Person { FirstName = "Jimi", Age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.Delete``1(System.Object)">
            <summary>
            删除一或者多行数据，使用匿名类属性的值作为筛选条件  E.g:
            <para>db.Delete(new { FirstName = "Jimi", Age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="anonType"></param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.Update``1(``0,System.Boolean)">
            <summary>
            更新一或者多行数据,使用主键作为筛选条件  E.g
            <para>db.Update(new Person { FirstName = "Jimi", Age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="updateAllFields">是否更新所有字段</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.Update``1(``0,System.Object,System.Boolean)">
            <summary>
            更新一或者多行数据,使用匿名类属性的值作为筛选条件  E.g:
            <para>db.Update(new { FirstName = "Jimi", Age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="anonType"></param>
            <param name="updateAllFields"></param>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.Select``1(``0)">
            <summary>
            查询一行或者多行数据，只使用（不是默认值）属性的值作为筛选条件  E.g:
            <para>db.Select(new Person { FirstName = "Jimi", Age = 27 })</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns>集合</returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.Select``1">
            <summary>
            查询一行或者多行数据，无筛选条件  E.g:
            <para>db.Select()</para>
            </summary>
            <typeparam name="T"></typeparam>
            <returns>集合</returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.ProcessException(TKS.ORMLite.ExecuteLogEventArgs)">
            <summary>
                处理运行时异常
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.TriggerBeforeExecute">
            <summary>
                执行前触发函数
            </summary>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.TriggerAfterExecute">
            <summary>
                执行后触发函数
            </summary>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.MakeSureCommandNotNull">
            <summary>
                确认命令不为空
            </summary>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.MakeSureConnectionNotNull">
            <summary>
                确认连接对象不为空
            </summary>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.SetCommandState">
            <summary>
                设置命令对象状态
            </summary>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.ClearCommandStatus">
            <summary>
                清理当前命令对象，处理方式：重置CommandText, Parameters.Clear() 
            </summary>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.GetParameter(System.String,System.Nullable{System.Data.DbType},System.Nullable{System.Int32},System.Object)">
            <summary>
                获取参数，不指定类型
            </summary>
            <param name="paraName">参数名</param>
            <param name="paraType">参数类型</param>
            <param name="size">大小</param>
            <param name="paraValue">参数值</param>
            <returns>IDbDataParameter</returns>
        </member>
        <member name="M:TKS.ORMLite.DBHelper.Dispose">
            <summary>
                释放放当前数据处理环境占用的资源
            </summary>
        </member>
        <member name="P:TKS.ORMLite.DBHelper.FileName">
            <summary>
                日志文件名
            </summary>
        </member>
        <member name="P:TKS.ORMLite.DBHelper.DBDSN">
            <summary>
            数据库标识：mssql,oracle,mysql
            </summary>
        </member>
        <member name="P:TKS.ORMLite.DBHelper.Connection">
            <summary>
                获取数据连接对象
            </summary>
        </member>
        <member name="P:TKS.ORMLite.DBHelper.Transaction">
            <summary>
                获取当前事务对象
            </summary>
        </member>
        <member name="P:TKS.ORMLite.DBHelper.Command">
            <summary>
                当前的命令对象，每当执行ExecteuXXXXXXXXX时，都会在这个对象上执行。
            </summary>
        </member>
        <member name="P:TKS.ORMLite.DBHelper.IsAutoOpenClose">
            <summary>
                获取或设置连接对象是否为自动打开、关闭连接，
                默认为true，如果要手动操作前打开连接，操作后关闭连接，请设置为false
            </summary>
        </member>
        <member name="P:TKS.ORMLite.DBHelper.IsAutoResetCommand">
            <summary>
                获取或设置Command对象是否自动重置，
                默认为true，每次执行完命令，Command对象都会被重置，
                重置方式，清除CommandText, Parameters.Clear() 
            </summary>
        </member>
        <member name="P:TKS.ORMLite.DBHelper.IsWriteLog">
            <summary>
                获取或设置发生异常是否写入日志，默认为false
            </summary>
        </member>
        <member name="T:TKS.ORMLite.Attrs.ItemFieldAttribute">
            <summary>
                用于标识实体的每个数据成员的一些加载信息
            </summary>
        </member>
        <member name="F:TKS.ORMLite.Attrs.ItemFieldAttribute.AllowNotFoundOnLoad">
            <summary>
                允许在加载时，找不到相应的匹配数据来源。（只用于值类型），此设置对于从数据库加载时无效。
            </summary>
        </member>
        <member name="F:TKS.ORMLite.Attrs.ItemFieldAttribute.DbFieldName">
            <summary>
                数据库中对应的字段名，如不指定，则与成员的名称相同。
            </summary>
        </member>
        <member name="F:TKS.ORMLite.Attrs.ItemFieldAttribute.IgnoreLoad">
            <summary>
                在加载数据时，不加载这个成员 
            </summary>
        </member>
        <member name="F:TKS.ORMLite.Attrs.ItemFieldAttribute.IsSubItem">
            <summary>
                指示是否是一个子实体对象 
            </summary>
        </member>
        <member name="F:TKS.ORMLite.Attrs.ItemFieldAttribute.KeyName">
            <summary>
                从查询字符串或者从FROM加载时的Key 
            </summary>
        </member>
        <member name="F:TKS.ORMLite.Attrs.ItemFieldAttribute.OnlyLoadAll">
            <summary>
                仅当设置为true时候有效，程序可控制是否加载该成员 
            </summary>
        </member>
        <member name="F:TKS.ORMLite.Attrs.ItemFieldAttribute.SetEmptyIfNotFoundOnLoad">
            <summary>
                在加载时，如果找不到相应的匹配数据来源，对于“字符串”类型来说，就设置为 String.Empty ，此设置对于从数据库加载时无效。
            </summary>
        </member>
        <member name="F:TKS.ORMLite.Attrs.ItemFieldAttribute.HasDefault">
            <summary>
               插入时，指示是否有默认值，如果有，则该字段不生成插入语句
            </summary>
        </member>
        <member name="T:TKS.ORMLite.DriverTypeFactory">
            <summary>
                数据驱动工厂
            </summary>
        </member>
        <member name="M:TKS.ORMLite.DriverTypeFactory.GetDriverType">
            <summary>
                根据配置文件获取数据驱动
            </summary>
            <returns></returns>
        </member>
        <member name="M:TKS.ORMLite.DriverTypeFactory.GetValue(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            读取配置项
            </summary>
            <param name="xmlDocument">配置文件</param>
            <param name="selectPath">查询路径</param>
            <param name="key">键</param>
            <returns>键值</returns>
        </member>
        <member name="T:TKS.ORMLite.Driver.SqlDriver">
            <summary>
            sqlserver驱动
            </summary>
        </member>
        <member name="M:TKS.ORMLite.Driver.SqlDriver.#ctor(System.String)">
            <summary>
                构造函数，连接字符串由<see cref="T:TKS.ORMLite.DriverTypeFactory"/>提供 
            </summary>
        </member>
        <member name="M:TKS.ORMLite.Driver.SqlDriver.FormatNameForParameter(System.String)">
            <summary>
            获取相关参数的名称
            </summary>
            <param name="parametername">参数名称</param>
            <returns>string</returns>
        </member>
        <member name="P:TKS.ORMLite.Driver.SqlDriver.Connection">
            <summary>
            获取数据连接对象
            </summary>
        </member>
        <member name="P:TKS.ORMLite.Driver.SqlDriver.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:TKS.ORMLite.Driver.SqlDriver.NamedPrefix">
            <summary>
            参数开头标识符
            </summary>
        </member>
        <member name="P:TKS.ORMLite.Driver.SqlDriver.DBDSN">
            <summary>
            数据库标识
            </summary>
        </member>
    </members>
</doc>
